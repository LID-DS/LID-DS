import secrets
import time

from lid_ds.core.collector.collector import Collector
from lid_ds.core.image import Image
from lid_ds.utils.docker_utils import format_command
from lid_ds.core.objects.base import ScenarioContainerBase
from lid_ds.sim.dockerize import run_image
from lid_ds.utils import log


class ScenarioExploit(ScenarioContainerBase):
    def __init__(self, image: Image):
        super().__init__(image)
        self.container = None
        self.container_name = "attacker_%s" % secrets.token_hex(8)
        self.logger = log.get_logger(self.container_name, self.queue)

    def start_container(self):
        self.container = run_image(self.image.name, self.network, self.container_name)

    def execute_exploit_at_time(self, execution_time):
        while time.time() < execution_time:
            time.sleep(0.5)
        Collector().set_exploit_start()

        self.logger.info('Executing the exploit now at {}'.format(time.time()))
        command = format_command(self.image.command)
        if self.to_stdin:
            socket = self.container.attach_socket(params={'stdin': 1, 'stream': 1})
            socket._writing = True
            socket.write(command.encode() + b"\n")
        else:
            _, logs = self.container.exec_run(command)
        Collector().set_exploit_end()

    def teardown(self):
        self.container.stop()
