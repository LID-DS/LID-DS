import argparse

from pyvirtualdisplay import Display
from selenium import webdriver
from selenium.webdriver.chrome.options import Options

from bruteforce import brute_force
from command_injection import command_injection
from file_upload import file_upload
from frontend_login import log_in
from headless_login import csrf_token, dvwa_login
from sql_injection import sql_injection

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='File upload exploit container.')

    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')

    parser.add_argument('-a', dest='attack', action='store', type=str, required=True,
                        help='name of the attack to be executed. Choose from ["RCE", "SQLI", "Bruteforce", "CommandInjection"]')
    args = parser.parse_args()

    # Virtual display to run browser
    display = Display(visible=False, size=(800, 800))
    display.start()

    # Headless chrome-browser settings
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--single-process")
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--headless')
    browser = webdriver.Chrome(options=chrome_options)

    print(f"executing attack: {args.attack}")

    if args.attack == "RCE":
        log_in(browser, args.server_ip)
        file_upload(browser, args.server_ip)

    elif args.attack == "SQLI":
        log_in(browser, args.server_ip)
        sql_injection(browser)

    elif args.attack == "Bruteforce":
        target = f"http://{args.server_ip}"
        # Get initial CSRF token
        session_id, user_token = csrf_token(target)
        # Login to web app
        dvwa_login(session_id, user_token, target)

        # start brute forcing
        brute_force(session_id, target)

    elif args.attack == "CommandInjection":
        log_in(browser, args.server_ip)
        command_injection(browser, args.server_ip)
