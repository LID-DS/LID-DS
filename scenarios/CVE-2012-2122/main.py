import sys
import random

import pymysql

from lid_ds.core import Scenario
from lid_ds.core.collector.json_file_store import JSONFileStorage
from lid_ds.core.image import StdinCommand, Image, ExecCommand
from lid_ds.sim.sampler import Sampler
from lid_ds.utils.docker_utils import get_host_port


class CVE_2012_2122(Scenario):
    def init_victim(self, container, logger):
        port = get_host_port(container, "3306")
        try:
            db = pymysql.connect("localhost", "root", "123456", port=port)
            try:
                db.cursor().execute('create database ' + "textDB")
            except Exception:
                pass

            self.db = pymysql.connect("localhost",
                                      "root",
                                      "123456",
                                      "textDB",
                                      port)
            sql = """CREATE TABLE `texts` (
                         `id` int(11) NOT NULL AUTO_INCREMENT,
                         `text` varchar(255) COLLATE utf8_bin NOT NULL,
                         PRIMARY KEY (`id`)
                     )
                     ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin
                     AUTO_INCREMENT=1 ;"""
            self.db.cursor().execute(sql)
        except Exception:
            pass

    def wait_for_availability(self, container):
        try:
            pymysql.connect("localhost",
                            "root",
                            "123456",
                            port=get_host_port(container, "3306"))
        except Exception:
            return False
        return True


def get_config_name(speed, extract):
    """
    returns names for different configurations
    """
    if speed == 'n' and extract == 0:
        return 'normal-no-extract'
    elif speed == 'n' and extract == 1:
        return 'normal-extract'
    elif speed == 's' and extract == 0:
        return 'slow-no-extract'
    elif speed == 's' and extract == 1:
        return 'slow-extract'
    elif speed == 'v' and extract == 0:
        return 'very-slow-no-extract'
    elif speed == 'v' and extract == 1:
        return 'very-slow-extract'


if __name__ == '__main__':

    # argument handling
    warmup_time = int(sys.argv[1])
    recording_time = int(sys.argv[2])
    do_exploit = int(sys.argv[3])

    # speed and extract are only relevant if the exploit is activated and do not need to be passed for normal recording
    if len(sys.argv) > 3 and do_exploit == 1:
        speed = sys.argv[4]
        do_extract = int(sys.argv[5])

        # exploit command that gets sent to docker container including the arguments
        exploit_command = "python3 /home/exploit.py -ip ${victim} -speed %s -extract %s" % (speed, do_extract)
        exploit_name = get_config_name(speed, do_extract)
        exploit_time = random.randint(int(recording_time * .3),
                                      int(recording_time * .8))
    else:
        exploit_command = ""
        exploit_name = "no-exploit"
        exploit_time = 0

    total_duration = warmup_time + recording_time

    min_user_count = 10
    max_user_count = 25
    user_count = random.randint(min_user_count, max_user_count)

    wait_times = Sampler("Sep4").extraction_sampling(total_duration)
    storage_services = [JSONFileStorage()]

    victim = Image('vulhub/mysql:5.5.23')
    exploit = Image("exploit_mysql",
                    command=ExecCommand(exploit_command))
    normal = Image("normal_mysql",
                   command=StdinCommand(""),
                   init_args="${victim} root 123456")

    mysql_scenario = CVE_2012_2122(
        victim=victim,
        normal=normal,
        exploit=exploit,
        wait_times=wait_times,
        warmup_time=warmup_time,
        recording_time=recording_time,
        storage_services=storage_services,
        exploit_start_time=exploit_time,
        exploit_name=exploit_name
    )
    mysql_scenario()
